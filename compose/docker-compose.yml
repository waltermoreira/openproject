version: "3.7"

networks:
  frontend:
  backend:
          # backend2:

volumes:
  pgdata:
          #  pgdata2:
  opdata:
          #  opdata2:

x-op-restart-policy: &restart_policy
  restart: unless-stopped
x-op-image: &image
  image: openproject/community:${TAG:-11}
x-op-app: &app
  <<: *image
  <<: *restart_policy
  environment:
    RAILS_CACHE_STORE: "memcache"
    OPENPROJECT_CACHE__MEMCACHE__SERVER: "cache:11211"
    OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
    DATABASE_URL: "postgres://postgres:${POSTGRES_PASSWORD}@db/openproject"
    USE_PUMA: "true"
    # set to true to enable the email receiving feature. See ./docker/cron for more options
    IMAP_ENABLED: "${IMAP_ENABLED:-false}"
  volumes:
    - "opdata:/var/openproject/assets"

#x-op-app2: &app2
#  <<: *app
#  environment:
#    RAILS_CACHE_STORE: "memcache"
#    OPENPROJECT_CACHE__MEMCACHE__SERVER: "cache2:11211"
#    OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
#    DATABASE_URL: "postgres://postgres:${POSTGRES_PASSWORD}@db2/openproject"
#    USE_PUMA: "true"
#    # set to true to enable the email receiving feature. See ./docker/cron for more options
#    IMAP_ENABLED: "${IMAP_ENABLED:-false}"
#  volumes:
#    - "opdata2:/var/openproject/assets"

services:
  traefik:
    image: traefik:2.3.7
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./proxy/traefik.toml:/traefik.toml"
      - "./proxy/traefik_dynamic.toml:/traefik_dynamic.toml"
      - "./proxy/acme.json:/acme.json"
      - "./proxy/users:/users"
    ports:
      - target: 80
        published: 80
      - target: 443
        published: 443
    networks:
      - frontend

  my_app:
    build: .
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - "3456:5000"
      # - target: 5000
      #   published: 3456
    labels:
      - traefik.http.routers.my_app.rule=(Host(`bar.discoball.life`) && PathPrefix(`/foo`))
      - traefik.http.routers.my_app.tls=true
      - traefik.http.routers.my_app.tls.certresolver=lets-encrypt
      - traefik.http.middlewares.nofoo.stripprefix.prefixes=/foo
      - traefik.http.routers.my_app.middlewares=nofoo@docker
      - traefik.port=80
    networks:
      - frontend

  gantt:
    build: ./space_gantt
    environment:
      SPACE_TOKEN: "${SPACE_TOKEN}"
      OPENPROJECT_KEY: "${OPENPROJECT_KEY}"
    expose:
      - "5000"
    networks:
      - backend

#  jobber:
#    build: ./jobber
#    networks:
#      - backend
#
  db: &orig_db
    image: postgres:10
    <<: *restart_policy
    stop_grace_period: "3s"
    volumes:
      - "pgdata:/var/lib/postgresql/data"
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: openproject
    networks:
      - backend

#  db2:
#    <<: *orig_db
#    volumes:
#      - "pgdata2:/var/lib/postgresql/data"
#    networks:
#      - backend2

  cache: &orig_cache
    image: memcached
    <<: *restart_policy
    networks:
      - backend

#  cache2:
#    <<: *orig_cache
#    networks:
#      - backend2

  proxy: &orig_proxy
    <<: *image
    <<: *restart_policy
    command: "./docker/prod/proxy"
    ports:
      - "8080:80"
    environment:
      APP_HOST: web
      OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
    depends_on:
      - web
    labels:
      - traefik.http.routers.proxy.rule=Host(`openproject.discoball.life`)
      - traefik.http.routers.proxy.tls=true
      - traefik.http.routers.proxy.tls.certresolver=lets-encrypt
      - traefik.port=80
    networks:
      - frontend

#  proxy2:
#    <<: *orig_proxy
#    ports:
#      - "8081:80"
#    environment:
#      APP_HOST: web2
#      OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
#    depends_on:
#      - web2
#    labels:
#      - traefik.http.routers.proxy2.rule=Host(`openproject2.discoball.life`)
#      - traefik.http.routers.proxy2.tls=true
#      - traefik.http.routers.proxy2.tls.certresolver=lets-encrypt
#      - traefik.port=80
#    networks:
#      - frontend

  web: &orig_web
    <<: *app
    command: "./docker/prod/web"
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - cache
      - seeder

#  web2:
#    <<: *orig_web
#    <<: *app2
#    networks:
#      - frontend
#      - backend2
#    depends_on:
#      - db2
#      - cache2
#      - seeder2

  worker: &orig_worker
    <<: *app
    command: "./docker/prod/worker"
    networks:
      - backend
    depends_on:
      - db
      - cache
      - seeder

#  worker2:
#    <<: *orig_worker
#    <<: *app2
#    networks:
#      - backend2
#    depends_on:
#      - db2
#      - cache2
#      - seeder2

  cron: &orig_cron
    <<: *app
    command: "./docker/prod/cron"
    networks:
      - backend
    depends_on:
      - db
      - cache
      - seeder

#  cron2:
#    <<: *orig_cron
#    <<: *app2
#    networks:
#      - backend2
#    depends_on:
#      - db2
#      - cache2
#      - seeder2

  seeder: &orig_seeder
    <<: *app
    command: "./docker/prod/seeder"
    restart: on-failure
    networks:
      - backend

#  seeder2:
#    <<: *orig_seeder
#    <<: *app2
#    networks:
#      - backend2
